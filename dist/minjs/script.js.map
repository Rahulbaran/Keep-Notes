{"version":3,"sources":["script.js"],"names":["AppModule","notesArray","noteIdsArray","addNote","note","date","Date","noteObj","this","length","id","getDate","getMonth","getFullYear","push","localStorage","setItem","JSON","stringify","localNotesInArray","notes","noteIds","deleteNote","noteIndex","indexOf","splice","UIModule","selectors","notesContainer","themeToggler","noteForm","inputField","addNoteInUI","document","querySelector","noteHtml","replace","insertAdjacentHTML","localNotesInUI","forEach","deleteNoteFromUI","childNodes","removeChild","EventModule","changeMode","UIMod","onclick","getItem","documentElement","className","classList","remove","removeItem","add","AppMod","noteEntryForm","addEventListener","e","preventDefault","noteText","value","trim","focus","addLocalStorageNotes","window","onload","parse","removeNote","noteDelBtn","target","parentNode","matches","noteId","split","init"],"mappings":"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","file":"script.js","sourcesContent":["\"use strict\";\n\n/* ****************************\n * Module which will have all the APP related code\n ***************************** */\nconst AppModule = {\n    notesArray: [],\n    noteIdsArray: [],\n\n    // Method to add note into an array & also in localStorage\n    addNote(note) {\n        //1. Create a note object containing note with an id & date\n        const date = new Date();\n        let noteObj;\n        if (this.notesArray.length === 0) {\n            noteObj = {\n                note: note,\n                id: 0,\n                date: `${date.getDate()}/${\n                    date.getMonth() + 1\n                }/${date.getFullYear()}`,\n            };\n        } else {\n            noteObj = {\n                note: note,\n                id: this.notesArray[this.notesArray.length - 1].id + 1,\n                date: `${date.getDate()}/${\n                    date.getMonth() + 1\n                }/${date.getFullYear()}`,\n            };\n        }\n\n        //2. Push the note object in the notesArray\n        this.notesArray.push(noteObj);\n\n        //3. Push the note Id in the noteIdsArray\n        this.noteIdsArray.push(noteObj.id);\n\n        //4. Store the notesArray in localStorage\n        localStorage.setItem(\"notes\", JSON.stringify(this.notesArray));\n\n        //5. Store the noteIdsArray\n        localStorage.setItem(\"noteIds\", JSON.stringify(this.noteIdsArray));\n\n        //6.Return the note object\n        return noteObj;\n    },\n\n    //Method to add localStorage notes in Array\n    localNotesInArray(notes, noteIds) {\n        this.notesArray = notes;\n        this.noteIdsArray = noteIds;\n    },\n\n    deleteNote(id) {\n        //1. Get the index of noteId\n        const noteIndex = this.noteIdsArray.indexOf(id);\n\n        //2. Check if noteIndex is not -1\n        if (noteIndex >= 0) {\n            // Remove the note from notesArray\n            this.notesArray.splice(noteIndex, 1);\n\n            // Remove the noteId from noteIdsArray\n            this.noteIdsArray.splice(noteIndex, 1);\n\n            //update the localStorage\n            localStorage.setItem(\"notes\", JSON.stringify(this.notesArray));\n            localStorage.setItem(\"noteIds\", JSON.stringify(this.noteIdsArray));\n\n            //Return the index of note\n            return noteIndex;\n        }\n    },\n};\n\n/* ****************************\n * Module which will have all the UI related code\n ***************************** */\nconst UIModule = {\n    //property containing all the selectors\n    selectors: {\n        notesContainer: \".notes__container\",\n        themeToggler: \".theme__toggler\",\n        noteForm: \".note__entry__form\",\n        inputField: \".text__field\",\n    },\n\n    //Method to add note in UI\n    addNoteInUI(noteObj) {\n        const notesContainer = document.querySelector(\n            this.selectors.notesContainer\n        );\n\n        //raw html for new note\n        let noteHtml = `<div class=\"note\" id=\"note-%id%\"><div class=\"note__content\">\n            <p>%note%</p><button class=\"delete__note__btn\" title=\"Delete Note\">\n            <span class=\"material-icons\">delete_forever</span></button>\n            </div><h5 class=\"note__added__date\">%date%</h5></div>`;\n\n        noteHtml = noteHtml.replace(\"%id%\", noteObj.id);\n        noteHtml = noteHtml.replace(\"%note%\", noteObj.note);\n        noteHtml = noteHtml.replace(\"%date%\", `${noteObj.date}`);\n\n        //insert new note in UI\n        notesContainer.insertAdjacentHTML(\"afterbegin\", noteHtml);\n    },\n\n    //Method to add localStorage saved notes in UI\n    localNotesInUI(notes) {\n        let notesContainer = document.querySelector(\n            this.selectors.notesContainer\n        );\n\n        //iterate through the notes array to all the notes\n        notes.forEach(note => {\n            let noteHtml = `<div class=\"note\" id=\"note-%id%\"><div class=\"note__content\">\n            <p>%note%</p><button class=\"delete__note__btn\" title=\"Delete Note\">\n            <span class=\"material-icons\">delete_forever</span></button>\n            </div><h5 class=\"note__added__date\">%date%</h5></div>`;\n            noteHtml = noteHtml.replace(\"%id%\", note.id);\n            noteHtml = noteHtml.replace(\"%note%\", note.note);\n            noteHtml = noteHtml.replace(\"%date%\", note.date);\n\n            notesContainer.insertAdjacentHTML(\"afterbegin\", noteHtml);\n        });\n    },\n\n    //Method to delete note from UI\n    deleteNoteFromUI(noteIndex) {\n        const notesContainer = document.querySelector(\n            this.selectors.notesContainer\n        );\n        const notes = notesContainer.childNodes;\n        notesContainer.removeChild(notes[notes.length - 1 - noteIndex]);\n    },\n};\n\n/* *****************************\n * Module which will have all the Events related code\n ***************************** */\nconst EventModule = {\n    //Method to change application theme\n    changeMode(UIMod) {\n        const themeToggler = document.querySelector(\n            UIMod.selectors.themeToggler\n        );\n\n        themeToggler.onclick = function () {\n            let theme = localStorage.getItem(\"theme\");\n            if (!theme) {\n                document.documentElement.className = \"dark--theme\";\n                this.classList.add(\"translate\");\n                localStorage.setItem(\"theme\", \"dark\");\n            } else {\n                document.documentElement.className = \"light--theme\";\n                this.classList.remove(\"translate\");\n                localStorage.removeItem(\"theme\");\n            }\n        };\n    },\n\n    //Method to add new notes in application\n    addNote(AppMod, UIMod) {\n        const noteEntryForm = document.querySelector(UIMod.selectors.noteForm);\n        const inputField = document.querySelector(UIMod.selectors.inputField);\n\n        noteEntryForm.addEventListener(\"submit\", e => {\n            //1. Prevent default behavior of form submission\n            e.preventDefault();\n\n            //2. get input value\n            const noteText = inputField.value.trim(\"\");\n\n            //3. Empty the inputField & set focus\n            inputField.value = \"\";\n            inputField.focus();\n\n            if (noteText.length > 0 && noteText.length <= 50) {\n                //4. pass input value to AppModule\n                const noteObj = AppMod.addNote(noteText);\n\n                //5. pass returned note object to UIModule\n                UIMod.addNoteInUI(noteObj);\n            }\n        });\n    },\n\n    //Method to check localStorage for saved notes & add them in UI and in the notesArray(in AppModule)\n    addLocalStorageNotes(AppMod, UIMod) {\n        window.onload = () => {\n            const notes = JSON.parse(localStorage.getItem(\"notes\"));\n            const noteIds = JSON.parse(localStorage.getItem(\"noteIds\"));\n\n            if (notes && noteIds) {\n                //Add localStorage saved Notes in UI\n                UIMod.localNotesInUI(notes);\n\n                //Add localStorage saved notes in notes Array\n                AppMod.localNotesInArray(notes, noteIds);\n            }\n\n            //Changing the theme color if theme key is in localStorage\n            document.querySelector(UIMod.selectors.inputField).focus();\n            const themeToggler = document.querySelector(\n                UIMod.selectors.themeToggler\n            );\n\n            const theme = localStorage.getItem(\"theme\");\n            if (theme) {\n                document.documentElement.className = \"dark--theme\";\n                themeToggler.classList.add(\"translate\");\n            }\n        };\n    },\n\n    //Method to delete note\n    removeNote(AppMod, UIMod) {\n        const notesContainer = document.querySelector(\n            UIMod.selectors.notesContainer\n        );\n\n        //listening for click event in notesContainer\n        notesContainer.addEventListener(\"click\", e => {\n            const noteDelBtn = e.target.parentNode;\n\n            //Check if target is the delete button\n            if (noteDelBtn.matches(\"button\")) {\n                //1. Get the note and its id\n                const note = noteDelBtn.parentNode.parentNode;\n                const noteId = +note.id.split(\"-\")[1];\n\n                //2. delete the note from the noteArray & also from localStorage\n                const noteIndex = AppMod.deleteNote(noteId);\n\n                //3. delete the note from UI\n                UIMod.deleteNoteFromUI(noteIndex);\n            }\n        });\n    },\n\n    //method to initialize all other methods\n    init(AppMod, UIMod) {\n        this.changeMode(UIMod);\n        this.addNote(AppMod, UIMod);\n        this.addLocalStorageNotes(AppMod, UIMod);\n        this.removeNote(AppMod, UIMod);\n    },\n};\n\nEventModule.init(AppModule, UIModule);\n"]}