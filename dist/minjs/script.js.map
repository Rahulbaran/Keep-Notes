{"version":3,"sources":["script.js"],"names":["AppModule","noteArray","addNote","note","date","Date","noteObj","this","length","id","getDate","getMonth","getFullYear","push","localStorage","setItem","JSON","stringify","localNotesInArray","notes","UIModule","addNoteInUI","notesContainer","document","querySelector","noteHtml","replace","insertAdjacentHTML","localNotesInUI","forEach","EventModule","changeMode","onclick","getItem","documentElement","className","classList","remove","removeItem","add","AppMod","UIMod","form","inputField","addEventListener","e","preventDefault","noteText","value","trim","focus","addLocalNotes","window","onload","parse","themeToggler","init"],"mappings":"AAAA,aAKA,MAAMA,UAAY,CACdC,UAAW,GAGXC,QAAQC,GAEJ,MAAMC,EAAO,IAAIC,KACjB,IAAIC,EA0BJ,OAxBIA,EAD0B,IAA1BC,KAAKN,UAAUO,OACL,CACNL,KAAMA,EACNM,GAAI,EACJL,KAAM,GAAGA,EAAKM,aACVN,EAAKO,WAAa,KAClBP,EAAKQ,iBAGH,CACNT,KAAMA,EACNM,GAAIF,KAAKN,UAAUM,KAAKN,UAAUO,OAAS,GAAGC,GAAK,EACnDL,KAAM,GAAGA,EAAKM,aACVN,EAAKO,WAAa,KAClBP,EAAKQ,iBAKjBL,KAAKN,UAAUY,KAAKP,GAGpBQ,aAAaC,QAAQ,QAASC,KAAKC,UAAUV,KAAKN,YAG3CK,GAIXY,kBAAkBC,GACdZ,KAAKN,UAAYkB,IAOnBC,SAAW,CAEbC,YAAYf,GACR,MAAMgB,EAAiBC,SAASC,cAAc,qBAG9C,IAAIC,EAAW,4RAKfA,EAAWA,EAASC,QAAQ,OAAQpB,EAAQG,IAC5CgB,EAAWA,EAASC,QAAQ,SAAUpB,EAAQH,MAC9CsB,EAAWA,EAASC,QAAQ,SAAU,GAAGpB,EAAQF,QAGjDkB,EAAeK,mBAAmB,aAAcF,IAIpDG,eAAeT,GACX,IAAIG,EAAiBC,SAASC,cAAc,qBAG5CL,EAAMU,SAAQ1B,IACV,IAAIsB,EAAW,4RAIfA,EAAWA,EAASC,QAAQ,OAAQvB,EAAKM,IACzCgB,EAAWA,EAASC,QAAQ,SAAUvB,EAAKA,MAC3CsB,EAAWA,EAASC,QAAQ,SAAUvB,EAAKC,MAE3CkB,EAAeK,mBAAmB,aAAcF,QAQtDK,YAAc,CAEhBC,aACyBR,SAASC,cAAc,mBAE/BQ,QAAU,WACPlB,aAAamB,QAAQ,UAM7BV,SAASW,gBAAgBC,UAAY,eACrC5B,KAAK6B,UAAUC,OAAO,aACtBvB,aAAawB,WAAW,WANxBf,SAASW,gBAAgBC,UAAY,cACrC5B,KAAK6B,UAAUG,IAAI,aACnBzB,aAAaC,QAAQ,QAAS,WAU1Cb,QAAQsC,EAAQC,GACZ,MAAMC,EAAOnB,SAASC,cAAc,sBAC9BmB,EAAapB,SAASC,cAAc,gBAG1CkB,EAAKE,iBAAiB,UAAUC,IAE5BA,EAAEC,iBAGF,MAAMC,EAAWJ,EAAWK,MAAMC,KAAK,IAMvC,GAHAN,EAAWK,MAAQ,GACnBL,EAAWO,QAEPH,EAASvC,OAAS,GAAKuC,EAASvC,QAAU,GAAI,CAE9C,MAAMF,EAAUkC,EAAOtC,QAAQ6C,GAG/BN,EAAMpB,YAAYf,QAM9B6C,cAAcX,EAAQC,GAClBW,OAAOC,OAAS,KACZ,MAAMlC,EAAQH,KAAKsC,MAAMxC,aAAamB,QAAQ,UAE1Cd,IAEAsB,EAAMb,eAAeT,GAGrBqB,EAAOtB,kBAAkBC,IAI7BI,SAASC,cAAc,gBAAgB0B,QACvC,MAAMK,EAAehC,SAASC,cAAc,mBAE9BV,aAAamB,QAAQ,WAE/BV,SAASW,gBAAgBC,UAAY,cACrCoB,EAAanB,UAAUG,IAAI,gBAMvCiB,KAAKhB,EAAQC,GACTlC,KAAKwB,aACLxB,KAAKL,QAAQsC,EAAQC,GACrBlC,KAAK4C,cAAcX,EAAQC,KAInCX,YAAY0B,KAAKxD,UAAWoB","file":"script.js","sourcesContent":["\"use strict\";\n\n/* ****************************\n * Module which will have all the APP related code\n ***************************** */\nconst AppModule = {\n    noteArray: [],\n\n    // Method to add note into an array & also in localStorage\n    addNote(note) {\n        //1. Create a note object containing note with an id & date\n        const date = new Date();\n        let noteObj;\n        if (this.noteArray.length === 0) {\n            noteObj = {\n                note: note,\n                id: 0,\n                date: `${date.getDate()}/${\n                    date.getMonth() + 1\n                }/${date.getFullYear()}`,\n            };\n        } else {\n            noteObj = {\n                note: note,\n                id: this.noteArray[this.noteArray.length - 1].id + 1,\n                date: `${date.getDate()}/${\n                    date.getMonth() + 1\n                }/${date.getFullYear()}`,\n            };\n        }\n\n        //2. Push the note object in the noteArray\n        this.noteArray.push(noteObj);\n\n        //3. Store the notes in localStorage\n        localStorage.setItem(\"notes\", JSON.stringify(this.noteArray));\n\n        //4.Return the note object\n        return noteObj;\n    },\n\n    //Method to add localStorage notes in Array\n    localNotesInArray(notes) {\n        this.noteArray = notes;\n    },\n};\n\n/* ****************************\n * Module which will have all the UI related code\n ***************************** */\nconst UIModule = {\n    //Method to add note in UI\n    addNoteInUI(noteObj) {\n        const notesContainer = document.querySelector(\".notes__container\");\n\n        //raw html for new note\n        let noteHtml = `<div class=\"note\" id=\"note-%id%\"><div class=\"note__content\">\n            <p>%note%</p><button class=\"delete__note__btn\" title=\"Delete Note\">\n            <span class=\"material-icons\">delete_forever</span></button>\n            </div><h5 class=\"note__added__date\">%date%</h5></div>`;\n\n        noteHtml = noteHtml.replace(\"%id%\", noteObj.id);\n        noteHtml = noteHtml.replace(\"%note%\", noteObj.note);\n        noteHtml = noteHtml.replace(\"%date%\", `${noteObj.date}`);\n\n        //insert new note in UI\n        notesContainer.insertAdjacentHTML(\"afterbegin\", noteHtml);\n    },\n\n    //Method to add localStorage saved notes in UI\n    localNotesInUI(notes) {\n        let notesContainer = document.querySelector(\".notes__container\");\n\n        //iterate through the notes array to all the notes\n        notes.forEach(note => {\n            let noteHtml = `<div class=\"note\" id=\"note-%id%\"><div class=\"note__content\">\n            <p>%note%</p><button class=\"delete__note__btn\" title=\"Delete Note\">\n            <span class=\"material-icons\">delete_forever</span></button>\n            </div><h5 class=\"note__added__date\">%date%</h5></div>`;\n            noteHtml = noteHtml.replace(\"%id%\", note.id);\n            noteHtml = noteHtml.replace(\"%note%\", note.note);\n            noteHtml = noteHtml.replace(\"%date%\", note.date);\n\n            notesContainer.insertAdjacentHTML(\"afterbegin\", noteHtml);\n        });\n    },\n};\n\n/* *****************************\n * Module which will have all the Events related code\n ***************************** */\nconst EventModule = {\n    //Method to change application theme\n    changeMode() {\n        const themeToggler = document.querySelector(\".theme__toggler\");\n\n        themeToggler.onclick = function () {\n            let theme = localStorage.getItem(\"theme\");\n            if (!theme) {\n                document.documentElement.className = \"dark--theme\";\n                this.classList.add(\"translate\");\n                localStorage.setItem(\"theme\", \"dark\");\n            } else {\n                document.documentElement.className = \"light--theme\";\n                this.classList.remove(\"translate\");\n                localStorage.removeItem(\"theme\");\n            }\n        };\n    },\n\n    //Method to add new notes in application\n    addNote(AppMod, UIMod) {\n        const form = document.querySelector(\".note__entry__form\");\n        const inputField = document.querySelector(\".text__field\");\n        //const addBtn = document.querySelector(\".note__add__btn span\");\n\n        form.addEventListener(\"submit\", e => {\n            //1. Prevent default behavior of form submission\n            e.preventDefault();\n\n            //2. get input value\n            const noteText = inputField.value.trim(\"\");\n\n            //3. Empty the inputField & set focus\n            inputField.value = \"\";\n            inputField.focus();\n\n            if (noteText.length > 0 && noteText.length <= 50) {\n                //4. pass input value to AppModule\n                const noteObj = AppMod.addNote(noteText);\n\n                //5. pass returned note object to UIModule\n                UIMod.addNoteInUI(noteObj);\n            }\n        });\n    },\n\n    //Method to check localStorage for saved notes & add them in UI and in the notesArray(in AppModule)\n    addLocalNotes(AppMod, UIMod) {\n        window.onload = () => {\n            const notes = JSON.parse(localStorage.getItem(\"notes\"));\n\n            if (notes) {\n                //Add localStorage saved Notes in UI\n                UIMod.localNotesInUI(notes);\n\n                //Add localStorage saved notes in notes Array\n                AppMod.localNotesInArray(notes);\n            }\n\n            //Changing the theme color if theme key is in localStorage\n            document.querySelector(\".text__field\").focus();\n            const themeToggler = document.querySelector(\".theme__toggler\");\n\n            const theme = localStorage.getItem(\"theme\");\n            if (theme) {\n                document.documentElement.className = \"dark--theme\";\n                themeToggler.classList.add(\"translate\");\n            }\n        };\n    },\n\n    //method to initialize all other methods\n    init(AppMod, UIMod) {\n        this.changeMode();\n        this.addNote(AppMod, UIMod);\n        this.addLocalNotes(AppMod, UIMod);\n    },\n};\n\nEventModule.init(AppModule, UIModule);\n"]}